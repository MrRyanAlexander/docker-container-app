apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.frontend.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    app: {{ .Values.frontend.name }}
    version: {{ .Values.app.version }}
    environment: {{ .Values.global.environment }}
spec:
  replicas: {{ .Values.app.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.frontend.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.frontend.name }}
        version: {{ .Values.app.version }}
    spec:
      containers:
      - name: frontend
        image: "{{ .Values.frontend.image.repository }}:{{ .Values.frontend.image.tag }}"
        imagePullPolicy: {{ .Values.frontend.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.frontend.service.targetPort }}
          name: http
        env:
        - name: NODE_ENV
          value: {{ .Values.frontend.env.NODE_ENV | quote }}
        - name: AUTH0_BASE_URL
          value: {{ .Values.frontend.env.AUTH0_BASE_URL | quote }}
        - name: AUTH0_SECRET
          valueFrom:
            secretKeyRef:
              name: auth0-secrets
              key: secret
        - name: AUTH0_ISSUER_BASE_URL
          valueFrom:
            secretKeyRef:
              name: auth0-secrets
              key: issuerBaseUrl
        - name: AUTH0_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: auth0-secrets
              key: clientId
        - name: AUTH0_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: auth0-secrets
              key: clientSecret
        - name: AUTH0_AUDIENCE
          valueFrom:
            secretKeyRef:
              name: auth0-secrets
              key: audience
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: url
        resources:
          requests:
            memory: {{ .Values.frontend.resources.requests.memory }}
            cpu: {{ .Values.frontend.resources.requests.cpu }}
          limits:
            memory: {{ .Values.frontend.resources.limits.memory }}
            cpu: {{ .Values.frontend.resources.limits.cpu }}
        {{- if .Values.frontend.livenessProbe }}
        livenessProbe:
          httpGet:
            path: {{ .Values.frontend.livenessProbe.httpGet.path }}
            port: {{ .Values.frontend.livenessProbe.httpGet.port }}
          initialDelaySeconds: {{ .Values.frontend.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.frontend.livenessProbe.periodSeconds }}
        {{- end }}
        {{- if .Values.frontend.readinessProbe }}
        readinessProbe:
          httpGet:
            path: {{ .Values.frontend.readinessProbe.httpGet.path }}
            port: {{ .Values.frontend.readinessProbe.httpGet.port }}
          initialDelaySeconds: {{ .Values.frontend.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.frontend.readinessProbe.periodSeconds }}
        {{- end }}
        volumeMounts:
        - name: docker-socket
          mountPath: /var/run/docker.sock
      volumes:
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      restartPolicy: Always 