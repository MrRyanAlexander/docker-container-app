name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Job 1: Code Quality and Linting
  lint-and-format:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run ESLint
        run: |
          cd frontend
          npm run lint

      - name: Check TypeScript
        run: |
          cd frontend
          npx tsc --noEmit

      - name: Check code formatting (Prettier)
        run: |
          cd frontend
          npx prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,md}"

  # Job 2: Unit and Integration Tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run unit tests with coverage
        run: |
          cd frontend
          npm run test:coverage
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          NODE_ENV: test

      - name: Run integration tests
        run: |
          cd frontend
          npm run test:integration
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Job 3: End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Build application
        run: |
          cd frontend
          npm run build
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test

      - name: Run Playwright tests
        run: |
          cd frontend
          npm run test:e2e
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          BASE_URL: http://localhost:3000

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

  # Job 4: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run npm audit
        run: |
          cd frontend
          npm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          command: test

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript,typescript

  # Job 5: Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: container-app/frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-frontend -p 3000:3000 container-app/frontend:test
          sleep 10
          curl -f http://localhost:3000 || exit 1
          docker stop test-frontend

  # Job 6: Kubernetes Manifests Validation
  k8s-validation:
    name: Kubernetes Manifests Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Validate Helm charts
        run: |
          helm lint helm/
          helm template test-release helm/ --values helm/values-dev.yaml --dry-run

      - name: Validate Kubernetes manifests
        run: |
          # Install kubeval for manifest validation
          curl -L https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz
          sudo mv kubeval /usr/local/bin
          
          # Validate Helm-generated manifests
          helm template test-release helm/ --values helm/values-dev.yaml | kubeval

      - name: Security scan Kubernetes manifests
        uses: azure/k8s-lint@v1
        with:
          manifests: |
            kubernetes/

  # Job 7: Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [test]
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build application
        run: |
          cd frontend
          npm run build
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test

      - name: Start application
        run: |
          cd frontend
          npm run start &
          sleep 10
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test

      - name: Install Artillery for load testing
        run: npm install -g artillery@latest

      - name: Run performance tests
        run: |
          echo "config:
            target: 'http://localhost:3000'
            phases:
              - duration: 60
                arrivalRate: 10
          scenarios:
            - name: 'Load test main pages'
              flow:
                - get:
                    url: '/'
                - get:
                    url: '/api/health-check'
          " > artillery-config.yml
          artillery run artillery-config.yml

  # Notification job
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, e2e-tests, security-scan, docker-build, k8s-validation]
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.lint-and-format.result == 'success' && needs.test.result == 'success' && needs.e2e-tests.result == 'success' }}
        run: echo "✅ All CI checks passed successfully!"

      - name: Notify failure
        if: ${{ needs.lint-and-format.result == 'failure' || needs.test.result == 'failure' || needs.e2e-tests.result == 'failure' }}
        run: echo "❌ CI checks failed. Please review the logs." 